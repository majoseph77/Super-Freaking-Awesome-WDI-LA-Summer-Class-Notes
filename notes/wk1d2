#**Lesson Objectives**

*Use Sublime to open and edit fies & folders

*Use sublime to create or delete files & folders

*Manage settings and packages in Sublime

#Bare minimum to operate bash

*See the path of the current directory

*Explain the difference between absolute and relative paths

*Define "path"

*Identify the following: ., .., ~, /

*See the contents of the current directory

*Change directories

*List visual cues for orienting youre self in the terminal, including different modes

*Create new files and directories

*Copy files & directories

*Move files & directories

*Delete files & directories

*Find additional info on a command

*Print the contents of a file to the screen

*Exit and ongoing process in the terminal


#**Today**
*Terminal & tools redux

*HTML review

*CSS intro


#**Git**

*Upstream- Instructors

*Origin - My backup on github

*Local- My compuers version of github

*If changes are made on origin/upstream/local you must pull before you can push.

*Changes can be made by using "git add" then "git commit"

*Bash should show GNU nano and ask to merge changes.

*Once this prompt appears use <ctrl x>



#**Prompts**
ctrl + click : gives you a menu option

cmd + shft + del : sends to trash

bang : !

pipe: |

cmd + shft + P : in sublime will open package window that gives you
lots of setting options

open . : opens finder

tree : gives you a file path of the directory youre in

rm -f: 'file' : removes a file without comp asking questions

-f: forces whatever the previous command iss

"-" : the dash character is a flag that gives you different options

mv: mv 'file' -moves file

mv'file name'/ 'new file name': changes file name

cp: copies a file/dir

ctrl + c: ends a process

ctrl +d: ends an application

man: will give you the manuals to a command it will change your terminal
mode to "less". "Less" is a text reading mode To exit "less" mode use "q"
  *Ex: "man ls" will give you the manual for list

  rm -rf : deletes

cmd=opt+ctrl+ f+n +'number' gives mult screens in subl

to comment out a section of code = cmd a cmd/
#** In Class Notes**

__**Two types of paths**__

  *Absolute Path - "/" the root the starting point of your computer.
  All absolute paths start with "/". (If it starts with a / its an absolute path)

  *Relative Path - everything path that does not start with a "/"

  *Three Types of relative paths:

    *1. "."  means from here look for " example"
      *Ex: "./" or "space 'dir'" tells the computer to go to that directory.

    *2. ". .": takes you to the parent directory
      *Ex: "cd../.." will take you 2 parent directories back

    *3. "~": takes you home

#__**Powerful text editors**__
  *vi(m)
  *emacs
  *nano - easiest editor

#**Lesson Objectives**
  *Create the basic structure of an HTML page including neccesary componentsof <head>)

  *Explain the different rules od HTML, CSS, JS

#**Notes**

*Model -View Separation
  *Model: Data
  *View: How it looks & how you interact w/ it
    *Keep data and all of the logic you use to interact with it separate

*Model -View Control "the controller is in charger of everything both model and view"
  *Model: Date
  *View: Presentation layer
  *Controller: works with the interaction between "self and view" and "self & model"


  *static webpage has no interaction just HTML and CSS side by side

*Thought process
  *What is the data on this pg?
  *How do we want the data of 2 seperate realms to look

*MVC in webpage
  *Model: HTML
  *View: CSS
  *Control: Javascript

*Metadata: data about data

*Every pg you make must have
  *<!DOCTYPE html>
  *langueage setting Ex: <html lang="en">
  *<head> element
  *<body> where the body of webpg goes
  *<title>
  *<meta> gives extra info about document; <meta charset="UTF-*8">
  *



#Vocab

*Elements: data
*Tags: refer to the type of data
*Attributes: extra meta-data written in the style: text="text"


Examples:

<p class="top-level-paragraph"> Hello</p>
tag Att                         Element closing tag

#Lesson Objectives
#CSS Selectors & Basic Styling
  *Match CSS with HTML elements

  *Use element, class, id selectors

  *Understand specificity calculations

  #Notes

  *Id: An individualized things; should only be used for one element use a # sound to call in CSS

  *Class: A group of things; classification; can be used for several different elements use a . to call in CSS
  *HTML tags

  *Specificity Heiarchy
  1. In line styling
  2. Id
  3. Classes/Attributes
  4. HTML tags

*Specifivity calculation
1 box per

#Web Typography
  *Learn the difference between the font & typeface

  *Understand importance of typography

  *Manipulate typographic properties

#Notes
*Font: something that encompassess all of the typefaces and the att. of font
  *style
  *color
  *size
  *weight
  *typeface

*Typeface: what a designer makes


*Serif: fancy elements to a letter

*San Serif: nothing fancy

*monospace: fixed width/ fixed space

#Manipulating typographic properties

*Fallbacks are back up fonts that will appear in case a browser does not read
your default. use commas in between font-family: will change your typface
  *EX: p.sannserif{
  font-family: Arial, Helvetica, sans-serif; under another pg in subl titled
  styles.css linked with href=

*Be uniform throughout if using single quations use throughout. only use quotes
for multi word typefaces

*use brew to become a better typer enter gtypist into terminal

#Pros and Cons of PX
*Pro
  -specificity

*Cons
  - not as responsive

* A better option is to use EM's over pixels because EM's are more
responsive

  -EM's will adopt the default font size of the browser and its entities ie:
  set font size of div, article, parag.

  -rem: only listens to the root (html) default
    *Ex if html setting is 16 px and div setting is 8 px rem wil stay at 16px
    because it only listens to the root


#MediaQuerys (responsive design)
*Point of media query is to be able to adjust for different
 screen sizes/devices. When it detects a different devixe or size media query
 change the size for you by using @media'type'

 Ex:
 @mediaonlyscreenand(max-width:300px)

 *This is a boolean value if the screen is less than 300px it will run

Assignment:

Make a responsive blog (responsive font) so use media querys so when u
change the screen size u cant see the difference in fonts












